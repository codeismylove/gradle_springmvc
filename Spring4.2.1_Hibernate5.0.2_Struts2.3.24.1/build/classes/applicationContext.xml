<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:tx="http://www.springframework.org/schema/tx"
xmlns:jpa="http://www.springframework.org/schema/data/jpa"
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/data/jpa 
http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
	<!-- 启动注解功能:自动注入 -->
	<context:annotation-config/>
	
	<!-- 启动aop的aspectj自动代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 配置切面
	<bean id="myAspect" class="com.ssh.ex01.util.MyAspect"></bean>
	-->
	<!-- Demo02 dataSource 和 sessionFactory的配置 -->
	<!-- 1.加载本地文件数据库配置 db.properties -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	
	<!-- 2.配置数据源 -->
	<!-- 数据源:C3P0  ComboPooledDataSource 注意前三个属性名-->	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${dataSource.driverClassName}"></property>
		<property name="jdbcUrl" value="${dataSource.url}"></property>
		<property name="user" value="${dataSource.username}"></property>
		<property name="password" value="${dataSource.password}"></property>
		<property name="maxPoolSize" value="40"></property>
		<property name="minPoolSize" value="1"></property>
		<property name="initialPoolSize" value="1"></property>
		<property name="maxIdleTime" value="20"></property>
	</bean>

	<!--Spring Data JPA 配置 3、4、5、6项-->
	<!--3.Spring Data JPA定义实体管理器工厂EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--如果删除了persistence.xml，则需要指定实体所在的路径否则会报找不到该文件-->  
		<property name="packagesToScan" value="com.ssh.ex01..*"/> 
		<!--用于指定持久化实方言-->
		<property name="jpaDialect">    
		    <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
		<!-- ClassLoader 实现 LoadTimeWeaver-->  
		<property name="loadTimeWeaver">
			<bean  class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
		<!-- 用于指定持久化实现厂商类 -->
		<property name="persistenceProvider">    
			<bean class="org.hibernate.ejb.HibernatePersistence"/>
		</property>    
		<property name="jpaProperties">
             <props>
                  <!-- 命名规则 My_NAME->MyName
                 <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop> -->
                 <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				 <prop key="hibernate.max_fetch_depth">2</prop>
				 <prop key="hibernate.hbm2ddl.auto">update</prop>
				 <prop key="hibernate.show_sql">true</prop>
                 <prop key="hibernate.format_sql">true</prop>
				<!--                
				<prop key="hibernate.query.substitutions">true 1, false 0</prop>
				<prop key="hibernate.default_batch_fetch_size">16</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="cache.cache.use_query_cache">true</prop>
				<prop key="cache.cache.use_second_level_cache">true</prop>
				 -->
			</props>
		</property>
    </bean>
    
    <!--4.Spring Data JPA配置事务管理器  JpaTransactionManager-->  
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
		<property name="entityManagerFactory" ref="entityManagerFactory" />  
	</bean> 

	<!--5.扫描@Transactional类自动进行事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	
	<!--6.配置Spring Data JPA扫描持久层目录,repository-impl-postfix指定repository接口的实现后缀（接口名+后缀）--> 
    <jpa:repositories base-package="com.ssh.ex01.repository"  />
	
	<!--- 需要在 <beans> 标签中增加对 jpa 命名空间的引用,如果使用默认命名规则,则自动引入不需要配置声明.
	 <jpa:repositories base-package="com.ssh.ex01.repository"
	 entity-manager-factory-ref="entityManagerFactory" 
	 transaction-manager-ref="transactionManager"/> 
	-->
 

	
	
	<!--7.扫描组件:扫描com.ssh.ex01路径下所有的类:根据下面四种注解区分不同功能的类:@Repository @Service @Controller @Component -->
	<context:component-scan base-package="com.ssh.ex01"/>

	
</beans>


